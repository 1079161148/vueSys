Vue 代码层面的优化；

1、v-if 和 v-show 区分使用场景
2、computed 和 watch  区分使用场景
3、长列表性能优化（在大量数据展示的情况下通过 Object.freeze 方法来冻结一个对象）
4、事件的销毁（Vue 组件销毁时，会自动清理它与其它实例的连接，解绑它的全部指令及事件监听器，但是仅限于组件本身的事件）
如这样的事件：需手动处理
created() {
  addEventListener('click', this.click, false)
},
beforeDestroy() {
  removeEventListener('click', this.click, false)
}

5、图片资源懒加载
6、路由懒加载
7、服务端渲染 SSR or 预渲染
8、第三方ui库的按需引入

webpack 配置层面的优化；

1、Webpack 对图片进行压缩（npm install image-webpack-loader --save-dev）
2、减少 ES6 转为 ES5 的冗余代码（npm install babel-plugin-transform-runtime --save-dev）
修改 .babelrc  配置文件为
"plugins": [
    "transform-runtime"
]
3、提取公共代码
/ 所有在 package.json 里面依赖的包，都会被打包进 vendor.js 这个文件中。

new webpack.optimize.CommonsChunkPlugin({
  name: 'vendor',
  minChunks: function(module, count) {
    return (
      module.resource &&
      /\.js$/.test(module.resource) &&
      module.resource.indexOf(
        path.join(__dirname, '../node_modules')
      ) === 0
    );
  }
}),

// 抽取出代码模块的映射关系

new webpack.optimize.CommonsChunkPlugin({
  name: 'manifest',
  chunks: ['vendor']
})

4、合并css js 提取公共的css 和 js代码
基础的 Web 技术层面的优化

1、开启 gzip 压缩
2、浏览器缓存
3、CDN 的使用